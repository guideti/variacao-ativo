// Autogenerated from Pigeon (v7.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "api.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface Visualisation ()
+ (Visualisation *)fromList:(NSArray *)list;
+ (nullable Visualisation *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation Visualisation
+ (instancetype)makeWithVisualisationType:(VisualisationType)visualisationType {
  Visualisation* pigeonResult = [[Visualisation alloc] init];
  pigeonResult.visualisationType = visualisationType;
  return pigeonResult;
}
+ (Visualisation *)fromList:(NSArray *)list {
  Visualisation *pigeonResult = [[Visualisation alloc] init];
  pigeonResult.visualisationType = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable Visualisation *)nullableFromList:(NSArray *)list {
  return (list) ? [Visualisation fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.visualisationType),
  ];
}
@end

@interface FlutterStockApiCodecReader : FlutterStandardReader
@end
@implementation FlutterStockApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [Visualisation fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FlutterStockApiCodecWriter : FlutterStandardWriter
@end
@implementation FlutterStockApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[Visualisation class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FlutterStockApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FlutterStockApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FlutterStockApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FlutterStockApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FlutterStockApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FlutterStockApiCodecReaderWriter *readerWriter = [[FlutterStockApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface FlutterStockApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FlutterStockApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)displayStockDataVisualisation:(Visualisation *)arg_visualisation completion:(void (^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterStockApi.displayStockData"
      binaryMessenger:self.binaryMessenger
      codec:FlutterStockApiGetCodec()];
  [channel sendMessage:@[arg_visualisation ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

NSObject<FlutterMessageCodec> *NativeNavigationApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void NativeNavigationApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NativeNavigationApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeNavigationApi.goBack"
        binaryMessenger:binaryMessenger
        codec:NativeNavigationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(goBackWithError:)], @"NativeNavigationApi api (%@) doesn't respond to @selector(goBackWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api goBackWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
